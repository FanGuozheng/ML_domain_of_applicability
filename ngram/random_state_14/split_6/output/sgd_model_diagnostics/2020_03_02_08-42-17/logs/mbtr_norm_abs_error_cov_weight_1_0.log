Mar 02, 2020 8:42:17 AM de.unibonn.realkd.common.parameter.DefaultSubCollectionParameter$JsonStringToCollectionParser findByString
WARNING: Could not find element 'soap_predE' in collection.
Mar 02, 2020 8:42:17 AM de.unibonn.realkd.common.parameter.DefaultSubCollectionParameter$JsonStringToCollectionParser findByString
WARNING: Could not find element 'mbtr_predE' in collection.
Mar 02, 2020 8:42:17 AM de.unibonn.realkd.common.parameter.DefaultSubCollectionParameter$JsonStringToCollectionParser findByString
WARNING: Could not find element 'norm_abs_error' in collection.
Mar 02, 2020 8:42:17 AM de.unibonn.realkd.common.parameter.DefaultSubCollectionParameter$JsonStringToCollectionParser findByString
WARNING: Could not find element 'norm_error' in collection.
Mar 02, 2020 8:42:17 AM de.unibonn.realkd.common.parameter.DefaultSubCollectionParameter$JsonStringToCollectionParser findByString
WARNING: Could not find element 'abs_sq_error' in collection.
Mar 02, 2020 8:42:17 AM de.unibonn.realkd.common.parameter.DefaultSubCollectionParameter$JsonStringToCollectionParser findByString
WARNING: Could not find element 'norm_abs_error_bystd' in collection.
Mar 02, 2020 8:42:17 AM de.unibonn.realkd.common.parameter.DefaultSubCollectionParameter$JsonStringToCollectionParser findByString
WARNING: Could not find element 'norm_sq_error_bystd' in collection.
Mar 02, 2020 8:42:17 AM de.unibonn.realkd.common.parameter.ParameterContainer lambda$pass$4
WARNING: Parameter value of num_results could not be passed to container.
Mar 02, 2020 8:42:17 AM de.unibonn.realkd.run.LegacyComputationSpecification build
INFO: accepted parameter values:
table=WPO 1.0.0
targets=[norm_abs_error]
modeling=Empirical distribution
dev_measure=norm. neg. mean shift
cov_func=coverage
controls=Optional.empty
cov_weight=1.0
ctr_weight=1.0
props=Statements about WPO 1.0.0
descr_lang=Closed conjunctions
attr_filter=[Ef, ngram_predE, abs_error, sum_pred_Ef_and_abs_error, sum_Ef_and_normalized_error, error, sq_error]
num_res=1
oest=coverage and negative mean shift
apx_fac=1.0
max_depth=Optional[4]
Mar 02, 2020 8:42:18 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, beta>=88.9399, gamma>=88.6772, gamma>=89.5751, id<124.500, id<246.500, id<=364.500, id<=483.000], Sample(mean=0.09257, std=0.17971, med=0.04304, amd=0.08214), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 99.0,frequency: 0.198,norm. neg. mean shift: 0.09703607833118125,avg. med. dev. gain: 0.0]); value 0.01921314350957389
Mar 02, 2020 8:42:18 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, id<246.500, id<=364.500, id<=483.000], Sample(mean=0.09242, std=0.16765, med=0.04429, amd=0.08400), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 203.0,frequency: 0.406,norm. neg. mean shift: 0.0984882143134763,avg. med. dev. gain: 0.0]); value 0.039986215011271385
Mar 02, 2020 8:42:18 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, id<=364.500, id<=483.000], Sample(mean=0.09261, std=0.14859, med=0.04897, amd=0.08178), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 296.0,frequency: 0.592,norm. neg. mean shift: 0.09672121354377439,avg. med. dev. gain: 0.0]); value 0.05725895841791443
Mar 02, 2020 8:42:18 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, id<=483.000], Sample(mean=0.09486, std=0.14434, med=0.05006, amd=0.08363), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 400.0,frequency: 0.8,norm. neg. mean shift: 0.07473892931981554,avg. med. dev. gain: 0.0]); value 0.05979114345585244
Mar 02, 2020 8:42:18 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, Natoms>=50.0000, alpha>=60.9679, b>=5.59494, beta>=88.9399, c>=4.05411, gamma>=88.6772, gamma>=89.5751], Sample(mean=0.08230, std=0.15087, med=0.03866, amd=0.07561), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 307.0,frequency: 0.614,norm. neg. mean shift: 0.1971982186695145,avg. med. dev. gain: 0.054168925476922876]); value 0.12107970626308191
Mar 02, 2020 8:42:18 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, ecn_bond_dist_In_O>=0.884845, ecn_bond_dist_O_In>=0.441622, percent_atom_in>=0.0729167], Sample(mean=0.08578, std=0.10065, med=0.05006, amd=0.06910), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 374.0,frequency: 0.748,norm. neg. mean shift: 0.16333188384891426,avg. med. dev. gain: 0.1356093716124195]); value 0.12217224911898786
Mar 02, 2020 8:42:18 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, b>=5.59494], Sample(mean=0.08709, std=0.13676, med=0.04438, amd=0.07574), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 431.0,frequency: 0.862,norm. neg. mean shift: 0.15050525200884532,avg. med. dev. gain: 0.05261224028773948]); value 0.12973552723162465
Mar 02, 2020 8:42:18 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, ecn_bond_dist_Al_In>=0.397169, ecn_bond_dist_Al_O>=0.887832, ecn_bond_dist_In_O>=0.884845], Sample(mean=0.07327, std=0.08255, med=0.04301, amd=0.05817), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 317.0,frequency: 0.634,norm. neg. mean shift: 0.28534432970834944,avg. med. dev. gain: 0.2723327068487648]); value 0.18090830503509356
Mar 02, 2020 8:42:18 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, alpha>=60.9679, beta>=88.9399, ecn_bond_dist_Al_In>=0.397169, ecn_bond_dist_Al_O>=0.887832, ecn_bond_dist_In_O>=0.884845], Sample(mean=0.06834, std=0.07739, med=0.04116, amd=0.05331), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 295.0,frequency: 0.59,norm. neg. mean shift: 0.33338072717786577,avg. med. dev. gain: 0.33317561185787264]); value 0.19669462903494078
Mar 02, 2020 8:42:18 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, ecn_bond_dist_Ga_O<=2.06812, ecn_bond_dist_In_O>=0.884845], Sample(mean=0.07176, std=0.08272, med=0.04301, amd=0.05727), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 343.0,frequency: 0.686,norm. neg. mean shift: 0.30007474443770327,avg. med. dev. gain: 0.28366588922950825]); value 0.20585127468426445
Mar 02, 2020 8:42:18 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, b<=9.76892, b>=5.59494, beta>=88.9399], Sample(mean=0.07009, std=0.13252, med=0.03707, amd=0.05986), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 326.0,frequency: 0.652,norm. neg. mean shift: 0.3163400337771459,avg. med. dev. gain: 0.25118209558379206]); value 0.20625370202269916
Mar 02, 2020 8:42:18 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, alpha>=60.9679, beta>=88.9399, ecn_bond_dist_Ga_O<=2.06812, ecn_bond_dist_In_O>=0.884845], Sample(mean=0.06679, std=0.07821, med=0.04116, amd=0.05267), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 318.0,frequency: 0.636,norm. neg. mean shift: 0.34856468539116975,avg. med. dev. gain: 0.3411243597122616]); value 0.22168713990878397
Mar 02, 2020 8:42:18 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, alpha>=60.9679, beta>=88.9399, ecn_bond_dist_Al_O<=2.06126, ecn_bond_dist_Ga_O<=2.06812, ecn_bond_dist_In_O>=0.884845], Sample(mean=0.06181, std=0.06836, med=0.03825, amd=0.04801), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 292.0,frequency: 0.584,norm. neg. mean shift: 0.39708230786954196,avg. med. dev. gain: 0.39951927329013687]); value 0.23189606779581248
Mar 02, 2020 8:42:18 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, alpha>=60.9679, b>=5.59494, beta>=88.9399, ecn_bond_dist_Ga_O<=2.06812, ecn_bond_dist_In_O>=0.884845], Sample(mean=0.05922, std=0.07271, med=0.03591, amd=0.04609), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 280.0,frequency: 0.56,norm. neg. mean shift: 0.4223229541654105,avg. med. dev. gain: 0.4234341103558291]); value 0.2365008543326299
Mar 02, 2020 8:42:20 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, b>=5.59494, beta<90.3548, beta<=93.4104, beta<=98.9690, ecn_bond_dist_Ga_O<=2.06812], Sample(mean=0.05994, std=0.07355, med=0.03495, amd=0.04791), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 289.0,frequency: 0.578,norm. neg. mean shift: 0.41532239877607197,avg. med. dev. gain: 0.40069932799056684]); value 0.24005634649256957
Mar 02, 2020 8:42:20 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound logStats
INFO: 1154/10000(0.1154) nodes discarded/created (3/4 best solution depth/max depth)
kth-best found - potential left: 0.24005634649256957 - 0.3334355186647011 (0.7199483350001697)  
ExceptionalPattern(Subgroup([Natoms<=80.0000, ecn_bond_dist_Al_O>=0.887832, gamma<=95.8630, vol_per_atom<=12.5954], Sample(mean=0.09837, std=0.17740, med=0.04897, amd=0.08793), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 364.0,frequency: 0.728,norm. neg. mean shift: 0.0404954844348591,avg. med. dev. gain: 0.0])
Size of boundary queue: 2369
Mar 02, 2020 8:42:22 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, b>=5.59494, beta<90.3548, beta<=93.4104, beta<=98.9690, ecn_bond_dist_Al_O<=2.06126, ecn_bond_dist_Ga_O<=2.06812], Sample(mean=0.05510, std=0.06144, med=0.03323, amd=0.04302), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 268.0,frequency: 0.536,norm. neg. mean shift: 0.4625816040384986,avg. med. dev. gain: 0.4618416591645763]); value 0.24794373976463524
Mar 02, 2020 8:42:22 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound logStats
INFO: 2314/20017(0.11560173852225608) nodes discarded/created (4/4 best solution depth/max depth)
kth-best found - potential left: 0.24794373976463524 - 0.30993806371809407 (0.7999783466097726)  
ExceptionalPattern(Subgroup([Natoms<=80.0000, ecn_bond_dist_Ga_O>=0.876602, gamma<=95.8630, percent_atom_al<=0.677083], Sample(mean=0.09695, std=0.14532, med=0.05451, amd=0.08121), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 357.0,frequency: 0.714,norm. neg. mean shift: 0.05432724764308253,avg. med. dev. gain: 0.0])
Size of boundary queue: 3160
Mar 02, 2020 8:42:25 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound logStats
INFO: 3322/30003(0.11072226110722261) nodes discarded/created (4/4 best solution depth/max depth)
kth-best found - potential left: 0.24794373976463524 - 0.2956267886515825 (0.8387052502770811)  
ExceptionalPattern(Subgroup([Natoms<=80.0000, ecn_bond_dist_Ga_O>=0.876602, ecn_bond_dist_Ga_O>=1.86989, vol_per_atom>=9.93938], Sample(mean=0.09075, std=0.13508, med=0.04923, amd=0.07734), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 322.0,frequency: 0.644,norm. neg. mean shift: 0.11484119045670771,avg. med. dev. gain: 0.0325723776748044])
Size of boundary queue: 3228
Mar 02, 2020 8:42:27 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound logStats
INFO: 4357/40000(0.108925) nodes discarded/created (4/4 best solution depth/max depth)
kth-best found - potential left: 0.24794373976463524 - 0.28413381439718566 (0.8726301735352029)  
ExceptionalPattern(Subgroup([Natoms<=80.0000, gamma<=95.8630, id<=483.000, percent_atom_ga<=0.609375], Sample(mean=0.09440, std=0.12705, med=0.05320, amd=0.08051), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 318.0,frequency: 0.636,norm. neg. mean shift: 0.07922636476948061,avg. med. dev. gain: 0.0])
Size of boundary queue: 2977
Mar 02, 2020 8:42:29 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound logStats
INFO: 5314/50007(0.10626512288279641) nodes discarded/created (4/4 best solution depth/max depth)
kth-best found - potential left: 0.24794373976463524 - 0.27386985949980086 (0.905334162063261)  
ExceptionalPattern(Subgroup([Natoms<=80.0000, beta<=98.9690, ecn_bond_dist_Ga_Al<=3.17034, vol_per_atom<=12.5954], Sample(mean=0.10067, std=0.15139, med=0.05561, amd=0.08439), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 323.0,frequency: 0.646,norm. neg. mean shift: 0.018044886879388964,avg. med. dev. gain: 0.0])
Size of boundary queue: 2475
Mar 02, 2020 8:42:31 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound logStats
INFO: 6265/60006(0.10440622604406226) nodes discarded/created (4/4 best solution depth/max depth)
kth-best found - potential left: 0.24794373976463524 - 0.26444166527801244 (0.9376122310528009)  
ExceptionalPattern(Subgroup([Natoms<=80.0000, a_c<=3.89541, ecn_bond_dist_In_O>=0.884845, vol_per_atom<=12.5954], Sample(mean=0.07705, std=0.08111, med=0.04761, amd=0.05965), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 284.0,frequency: 0.568,norm. neg. mean shift: 0.2484160958289385,avg. med. dev. gain: 0.2538167766928439])
Size of boundary queue: 1968
Mar 02, 2020 8:42:33 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound logStats
INFO: 7153/70002(0.10218279477729207) nodes discarded/created (4/4 best solution depth/max depth)
kth-best found - potential left: 0.24794373976463524 - 0.25637519456806 (0.9671128292359561)  
ExceptionalPattern(Subgroup([Natoms<=80.0000, ecn_bond_dist_Al_O>=0.887832, ecn_bond_dist_In_Ga<=3.18159, ecn_bond_dist_O_Al>=0.358355, ecn_bond_dist_O_Al>=0.887223, percent_atom_al>=0.109375], Sample(mean=0.10539, std=0.17295, med=0.05561, amd=0.09376), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 293.0,frequency: 0.586,norm. neg. mean shift: 0.0,avg. med. dev. gain: 0.0])
Size of boundary queue: 1240
Mar 02, 2020 8:42:35 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound logStats
INFO: 7919/80009(0.09897636515891962) nodes discarded/created (4/4 best solution depth/max depth)
kth-best found - potential left: 0.24794373976463524 - 0.2479875805751082 (0.9998232136852527)  
ExceptionalPattern(Subgroup([Natoms<=80.0000, a>=9.88924, c<=9.33887, ecn_bond_dist_In_O>=0.884845, ecn_bond_dist_O_In>=0.441622, percent_atom_in>=0.0729167], Sample(mean=0.07774, std=0.08539, med=0.04763, amd=0.06006), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 266.0,frequency: 0.532,norm. neg. mean shift: 0.2416833807552942,avg. med. dev. gain: 0.24879579596483453])
Size of boundary queue: 411
Mar 02, 2020 8:42:35 AM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound logStats
INFO: 7919/80111(0.09885034514610977) nodes discarded/created (4/4 best solution depth/max depth)
kth-best found - potential left: 0.24794373976463524 - 0.2479391210308191 (1.0000186284995967)  
ExceptionalPattern(Subgroup([Natoms<=80.0000, b>=5.59494, ecn_bond_dist_In_Al<=3.17865, percent_atom_ga<=0.609375], Sample(mean=0.09012, std=0.10767, med=0.05289, amd=0.07585), Sample(mean=0.10252, std=0.16640, med=0.05443, amd=0.07995)), [support: 274.0,frequency: 0.548,norm. neg. mean shift: 0.12097458662877353,avg. med. dev. gain: 0.05128165388485833])
Size of boundary queue: 400
Mar 02, 2020 8:42:35 AM de.unibonn.realkd.algorithms.emm.ExceptionalSubgroupBestFirstBranchAndBound concreteCall
INFO: Start post-processing
Mar 02, 2020 8:42:35 AM de.unibonn.realkd.algorithms.emm.ExceptionalSubgroupBestFirstBranchAndBound concreteCall
INFO: Done post-processing
