Feb 12, 2020 5:41:58 PM de.unibonn.realkd.common.parameter.DefaultSubCollectionParameter$JsonStringToCollectionParser findByString
WARNING: Could not find element 'norm_abs_error' in collection.
Feb 12, 2020 5:41:58 PM de.unibonn.realkd.common.parameter.DefaultSubCollectionParameter$JsonStringToCollectionParser findByString
WARNING: Could not find element 'norm_error' in collection.
Feb 12, 2020 5:41:58 PM de.unibonn.realkd.common.parameter.DefaultSubCollectionParameter$JsonStringToCollectionParser findByString
WARNING: Could not find element 'abs_sq_error' in collection.
Feb 12, 2020 5:41:58 PM de.unibonn.realkd.common.parameter.DefaultSubCollectionParameter$JsonStringToCollectionParser findByString
WARNING: Could not find element 'norm_abs_error_bystd' in collection.
Feb 12, 2020 5:41:58 PM de.unibonn.realkd.common.parameter.DefaultSubCollectionParameter$JsonStringToCollectionParser findByString
WARNING: Could not find element 'norm_sq_error_bystd' in collection.
Feb 12, 2020 5:41:58 PM de.unibonn.realkd.common.parameter.ParameterContainer lambda$pass$4
WARNING: Parameter value of num_results could not be passed to container.
Feb 12, 2020 5:41:58 PM de.unibonn.realkd.run.LegacyComputationSpecification build
INFO: accepted parameter values:
table=SGD 2.0.0
targets=[norm_abs_error]
modeling=Empirical distribution
dev_measure=norm. neg. mean shift
cov_func=coverage
controls=Optional.empty
cov_weight=1.0
ctr_weight=1.0
props=Statements about SGD 2.0.0
descr_lang=Closed conjunctions
attr_filter=[Ef, soap_predE, abs_error, sum_pred_Ef_and_abs_error, sum_Ef_and_normalized_error, error, sq_error]
num_res=1
oest=coverage and negative mean shift
apx_fac=1.0
max_depth=Optional[4]
Feb 12, 2020 5:41:58 PM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, id>=117.000], Sample(mean=0.09111, std=0.19720, med=0.04509, amd=0.08252), Sample(mean=0.10085, std=0.35609, med=0.04703, amd=0.07691)), [support: 401.0,frequency: 0.802,norm. neg. mean shift: 0.09661085147097956,avg. med. dev. gain: 0.0]); value 0.07748190287972562
Feb 12, 2020 5:41:58 PM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, ecn_bond_dist_Al_O>=0.887832, ecn_bond_dist_O_Al>=0.358355, percent_atom_al>=0.109375], Sample(mean=0.08760, std=0.17748, med=0.04889, amd=0.07561), Sample(mean=0.10085, std=0.35609, med=0.04703, amd=0.07691)), [support: 385.0,frequency: 0.77,norm. neg. mean shift: 0.13140500832324417,avg. med. dev. gain: 0.016928113424639332]); value 0.10118185640889801
Feb 12, 2020 5:41:58 PM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, ecn_bond_dist_O_Ga<=1.72934, gamma>=84.7500, percent_atom_ga<0.203125, percent_atom_ga<=0.359375, percent_atom_ga<=0.609375], Sample(mean=0.07272, std=0.11581, med=0.04365, amd=0.05788), Sample(mean=0.10085, std=0.35609, med=0.04703, amd=0.07691)), [support: 209.0,frequency: 0.418,norm. neg. mean shift: 0.27893718039975357,avg. med. dev. gain: 0.24739306283920662]); value 0.11659574140709698
Feb 12, 2020 5:41:58 PM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, percent_atom_ga<=0.609375], Sample(mean=0.07949, std=0.16239, med=0.04468, amd=0.06630), Sample(mean=0.10085, std=0.35609, med=0.04703, amd=0.07691)), [support: 427.0,frequency: 0.854,norm. neg. mean shift: 0.21184009234221435,avg. med. dev. gain: 0.13794275227486086]); value 0.18091143886025104
Feb 12, 2020 5:41:58 PM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, ecn_bond_dist_In_O>=0.884845, ecn_bond_dist_O_In>=0.412304, percent_atom_in>=0.0729167], Sample(mean=0.06989, std=0.12700, med=0.04429, amd=0.05244), Sample(mean=0.10085, std=0.35609, med=0.04703, amd=0.07691)), [support: 370.0,frequency: 0.74,norm. neg. mean shift: 0.3069754231923672,avg. med. dev. gain: 0.31820844322616515]); value 0.22716181316235173
Feb 12, 2020 5:41:58 PM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, beta<90.3548, beta<=92.6991, beta<=98.6788], Sample(mean=0.06903, std=0.13260, med=0.04272, amd=0.05301), Sample(mean=0.10085, std=0.35609, med=0.04703, amd=0.07691)), [support: 411.0,frequency: 0.822,norm. neg. mean shift: 0.3155691533274106,avg. med. dev. gain: 0.3107024343238763]); value 0.2593978440351315
Feb 12, 2020 5:41:58 PM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, a_c<=3.88836, beta<90.3548, beta<=92.6991, beta<=98.6788, c>=4.05411], Sample(mean=0.06298, std=0.12730, med=0.04123, amd=0.04666), Sample(mean=0.10085, std=0.35609, med=0.04703, amd=0.07691)), [support: 382.0,frequency: 0.764,norm. neg. mean shift: 0.37546980867604823,avg. med. dev. gain: 0.3933333818241283]); value 0.28685893382850086
Feb 12, 2020 5:41:58 PM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, a_c<=3.88836, alpha>=60.9679, beta>=88.9526, gamma>=84.7500, gamma>=88.6772], Sample(mean=0.06326, std=0.12676, med=0.04111, amd=0.04733), Sample(mean=0.10085, std=0.35609, med=0.04703, amd=0.07691)), [support: 389.0,frequency: 0.778,norm. neg. mean shift: 0.37274064316302274,avg. med. dev. gain: 0.3845303053538534]); value 0.2899922203808317
Feb 12, 2020 5:41:59 PM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound updateResults
INFO: Best solution updated: ExceptionalPattern(Subgroup([Natoms<=80.0000, a_c<=3.88836, alpha>=60.9679, beta<90.3548, beta<=92.6991, beta<=98.6788, beta>=88.9526, gamma>=84.7500, gamma>=88.6772], Sample(mean=0.06252, std=0.12702, med=0.04111, amd=0.04636), Sample(mean=0.10085, std=0.35609, med=0.04703, amd=0.07691)), [support: 383.0,frequency: 0.766,norm. neg. mean shift: 0.38009985844299793,avg. med. dev. gain: 0.3972534362565049]); value 0.2911564915673364
Feb 12, 2020 5:42:01 PM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound logStats
INFO: 1560/10007(0.15589087638652943) nodes discarded/created (4/4 best solution depth/max depth)
kth-best found - potential left: 0.2911564915673364 - 0.36343828103963494 (0.8011167418425694)  
ExceptionalPattern(Subgroup([Natoms<=80.0000, beta>=88.9526, c>=4.05411, ecn_bond_dist_Ga_O>=0.876602, ecn_bond_dist_O_Ga>=0.373763, gamma>=84.7500, percent_atom_ga>=0.0885417], Sample(mean=0.10408, std=0.40838, med=0.04459, amd=0.10564), Sample(mean=0.10085, std=0.35609, med=0.04703, amd=0.07691)), [support: 365.0,frequency: 0.73,norm. neg. mean shift: 0.0,avg. med. dev. gain: 0.0])
Size of boundary queue: 1524
Feb 12, 2020 5:42:03 PM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound logStats
INFO: 2915/20006(0.14570628811356592) nodes discarded/created (4/4 best solution depth/max depth)
kth-best found - potential left: 0.2911564915673364 - 0.3357076586643592 (0.867291776201135)  
ExceptionalPattern(Subgroup([Natoms<=80.0000, alpha>=60.9679, b_c<=1.38613, beta>=88.9526, gamma>=84.7500, id<=478.000], Sample(mean=0.09770, std=0.43295, med=0.04244, amd=0.10049), Sample(mean=0.10085, std=0.35609, med=0.04703, amd=0.07691)), [support: 320.0,frequency: 0.64,norm. neg. mean shift: 0.031222191363939045,avg. med. dev. gain: 0.0])
Size of boundary queue: 1654
Feb 12, 2020 5:42:06 PM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound logStats
INFO: 4197/30016(0.1398254264392324) nodes discarded/created (4/4 best solution depth/max depth)
kth-best found - potential left: 0.2911564915673364 - 0.31815682189611744 (0.9151351520050166)  
ExceptionalPattern(Subgroup([Natoms<=80.0000, b>=5.59494, beta<90.3548, beta<=92.6991, beta<=98.6788, ecn_bond_dist_Al_O<=2.06905], Sample(mean=0.05841, std=0.07364, med=0.04091, amd=0.03994), Sample(mean=0.10085, std=0.35609, med=0.04703, amd=0.07691)), [support: 299.0,frequency: 0.598,norm. neg. mean shift: 0.42086038678971893,avg. med. dev. gain: 0.48068499129918363])
Size of boundary queue: 1341
Feb 12, 2020 5:42:08 PM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound logStats
INFO: 5438/40003(0.1359398045146614) nodes discarded/created (4/4 best solution depth/max depth)
kth-best found - potential left: 0.2911564915673364 - 0.30312265017533546 (0.9605237068194097)  
ExceptionalPattern(Subgroup([Natoms<=80.0000, ecn_bond_dist_Ga_O<=2.07250, ecn_bond_dist_In_O<=2.07286, ecn_bond_dist_In_O>=0.884845], Sample(mean=0.07949, std=0.17415, med=0.04733, amd=0.06583), Sample(mean=0.10085, std=0.35609, med=0.04703, amd=0.07691)), [support: 306.0,frequency: 0.612,norm. neg. mean shift: 0.2118366400672047,avg. med. dev. gain: 0.14398470236841288])
Size of boundary queue: 701
Feb 12, 2020 5:42:10 PM de.unibonn.realkd.algorithms.branchbound.BestFirstBranchAndBound logStats
INFO: 6520/48488(0.13446625969311995) nodes discarded/created (4/4 best solution depth/max depth)
kth-best found - potential left: 0.2911564915673364 - 0.290161999455001 (1.0034273685534403)  
ExceptionalPattern(Subgroup([Natoms<=80.0000, ecn_bond_dist_Al_O<=1.96785, ecn_bond_dist_Al_O<=2.06905, gamma<=90.9611, gamma<=98.5104, gamma>=84.7500], Sample(mean=0.10639, std=0.44691, med=0.04351, amd=0.11127), Sample(mean=0.10085, std=0.35609, med=0.04703, amd=0.07691)), [support: 287.0,frequency: 0.574,norm. neg. mean shift: 0.0,avg. med. dev. gain: 0.0])
Size of boundary queue: 11
Feb 12, 2020 5:42:10 PM de.unibonn.realkd.algorithms.emm.ExceptionalSubgroupBestFirstBranchAndBound concreteCall
INFO: Start post-processing
Feb 12, 2020 5:42:10 PM de.unibonn.realkd.algorithms.emm.ExceptionalSubgroupBestFirstBranchAndBound concreteCall
INFO: Done post-processing
